#pragma once
#include"Macros.h"
#include<iostream>
#include<cmath>
#include<numbers>
#include<vector>
#include<optional>
#include<iomanip>
#include<utility>
#include<functional>
#include<numeric>
_PA_BEGIN

inline constexpr long double x[64] = {
    -0.0243502926634244325089558428537156614268871093149758091634531663960566965166295288529853061657116894882370493013671717560479926679408068852617342586968190919443025679363843727751902756254975073084367002129407854253246662805532069172532219089321005870178809284335033318073251039701073379759,
    0.0243502926634244325089558428537156614268871093149758091634531663960566965166295288529853061657116894882370493013671717560479926679408068852617342586968190919443025679363843727751902756254975073084367002129407854253246662805532069172532219089321005870178809284335033318073251039701073379759,
    -0.0729931217877990394495429419403374932441261816687788533563163323377395217254429050181833064967505478802134768007678458612956459126148837496307967995621683597067400860540057918571357609346700883624064782909888895547912499697295335516804810990011835717296819569741981551097569810739977931249,
    0.0729931217877990394495429419403374932441261816687788533563163323377395217254429050181833064967505478802134768007678458612956459126148837496307967995621683597067400860540057918571357609346700883624064782909888895547912499697295335516804810990011835717296819569741981551097569810739977931249,
    -0.1214628192961205544703764634922478782186836383371912940423495826006931832245070944213952236889690237679661122848626352437115925113582515415979746598665681268376919737373113667247142315234607397986222184384307059013512155412722263090766858403726100735651684437098923088469949297570988091677,
    0.1214628192961205544703764634922478782186836383371912940423495826006931832245070944213952236889690237679661122848626352437115925113582515415979746598665681268376919737373113667247142315234607397986222184384307059013512155412722263090766858403726100735651684437098923088469949297570988091677,
    -0.1696444204239928180373136297482698441999902667343778505894178746884342357796505591325925801106834127602396624627746208498838190598644711533868179088757129652678801285453336384132061358206434768209251779433993367981112053126660575920785488821886662635718276505127786854167528795165050389903,
    0.1696444204239928180373136297482698441999902667343778505894178746884342357796505591325925801106834127602396624627746208498838190598644711533868179088757129652678801285453336384132061358206434768209251779433993367981112053126660575920785488821886662635718276505127786854167528795165050389903,
    -0.217423643740007084149648748988822617578485831141222348630380401885689634737659235537163737740243604800759921292790013642836998201691226098978544332296437547642195961469059807833597096166848933098833151166287901339013986496737408125314858259377210847115061960167857239951500335854820530586,
    0.217423643740007084149648748988822617578485831141222348630380401885689634737659235537163737740243604800759921292790013642836998201691226098978544332296437547642195961469059807833597096166848933098833151166287901339013986496737408125314858259377210847115061960167857239951500335854820530586,
    -0.2646871622087674163739641725100201179804131362950932439559895448126206429452852982016450901649805445999078728714943692622330016257776575354105370883948495294882935681426154386660616476411740312465060150591301869544672050088454083442813632094277160007745547301572849406353682760306061929911,
    0.2646871622087674163739641725100201179804131362950932439559895448126206429452852982016450901649805445999078728714943692622330016257776575354105370883948495294882935681426154386660616476411740312465060150591301869544672050088454083442813632094277160007745547301572849406353682760306061929911,
    -0.3113228719902109561575126985601568835577153578680501269954571709858169098868398268719654999460149709757804582988077747605532896065842023340674450299515989484487746153929299031759475919924980452933324186984188982046762542556035347023744560814177013801414889023264804693830155588690576492164,
    0.3113228719902109561575126985601568835577153578680501269954571709858169098868398268719654999460149709757804582988077747605532896065842023340674450299515989484487746153929299031759475919924980452933324186984188982046762542556035347023744560814177013801414889023264804693830155588690576492164,
    -0.357220158337668115950442615046202531626264464640909112021237019340099177403802509741325589540743874845093675632547750287037622834793938695456980400958079292460482315821150714268593539935795231095157602025909339384694681190969656053235824652679875951093689200190014853543993102190088381483,
    0.357220158337668115950442615046202531626264464640909112021237019340099177403802509741325589540743874845093675632547750287037622834793938695456980400958079292460482315821150714268593539935795231095157602025909339384694681190969656053235824652679875951093689200190014853543993102190088381483,
    -0.4022701579639916036957667712601588487132652056150208082760431843129087214967261515969669708970990221669508217089555714806012046537594438323569293594638517933840725639831594134038262580440842200076281605641993773325072728778928440394419613403725280285705765326861533477990551765453978736181,
    0.4022701579639916036957667712601588487132652056150208082760431843129087214967261515969669708970990221669508217089555714806012046537594438323569293594638517933840725639831594134038262580440842200076281605641993773325072728778928440394419613403725280285705765326861533477990551765453978736181,
    -0.4463660172534640879849477147589151892067507578262501763082606820212937626970791295735937384813941473610238854736863966831464694923749954564921955859791688348936235671762050333408576202492209167272366373825152067680845198006626563761196191045700093968519269790165913301841545609485952718504,
    0.4463660172534640879849477147589151892067507578262501763082606820212937626970791295735937384813941473610238854736863966831464694923749954564921955859791688348936235671762050333408576202492209167272366373825152067680845198006626563761196191045700093968519269790165913301841545609485952718504,
    -0.4894031457070529574785263070219213908493732974637398373316540793240315585537584844752851087115581833443158831657759501916744927211636581386025171070582998790865902140901838128045602667002106847665927788023098753138400106615804847725751247952878407027140260429761863258319891988431055536872,
    0.4894031457070529574785263070219213908493732974637398373316540793240315585537584844752851087115581833443158831657759501916744927211636581386025171070582998790865902140901838128045602667002106847665927788023098753138400106615804847725751247952878407027140260429761863258319891988431055536872,
    -0.531279464019894545658013903544455247408525588734180238053268047166041778398245121448843253296460411619816073385211875151397248937264089998182375345915413219579220233566173902955487674957069948591213673456625912506280248298229907928060620469290406581396192419570799497688513058132396498814,
    0.531279464019894545658013903544455247408525588734180238053268047166041778398245121448843253296460411619816073385211875151397248937264089998182375345915413219579220233566173902955487674957069948591213673456625912506280248298229907928060620469290406581396192419570799497688513058132396498814,
    -0.5718956462026340342838781166591886431831910060912509932273284719418912212643223327597417735844776972648163821225207266145263395898251858906124801356522395225326954546582593857056725545247314092886133249957455688586118199388064447508712958637376347457406936802691416300157802889354368128467,
    0.5718956462026340342838781166591886431831910060912509932273284719418912212643223327597417735844776972648163821225207266145263395898251858906124801356522395225326954546582593857056725545247314092886133249957455688586118199388064447508712958637376347457406936802691416300157802889354368128467,
    -0.6111553551723932502488529710185489186961245593079718443367976666933088374650288148448667879830703867726577720666491772560110368248450475818132595468834493579434418252468978282181164008820769765174450056817468275783966537351796625224747700783378315186174632657840114512887287754747902924865,
    0.6111553551723932502488529710185489186961245593079718443367976666933088374650288148448667879830703867726577720666491772560110368248450475818132595468834493579434418252468978282181164008820769765174450056817468275783966537351796625224747700783378315186174632657840114512887287754747902924865,
    -0.6489654712546573398577612319934048855296904334732011728792502624366057598865738239773166627826358871699142531853930525866830933399401844502541092962631127742267449897116125748014270680393024011359139031312062573520509858894743036198986443014969748157931850178889912972291202354657382925509,
    0.6489654712546573398577612319934048855296904334732011728792502624366057598865738239773166627826358871699142531853930525866830933399401844502541092962631127742267449897116125748014270680393024011359139031312062573520509858894743036198986443014969748157931850178889912972291202354657382925509,
    -0.6852363130542332425635583710313763019356410785396718681324042749913611976548967332647625541234155413035075739348863233240851709341392873173633850612006618690218164007761541855237208605116527909791956398350719463021018362527198358286721239529091637248252469435642287693207506339068528700205,
    0.6852363130542332425635583710313763019356410785396718681324042749913611976548967332647625541234155413035075739348863233240851709341392873173633850612006618690218164007761541855237208605116527909791956398350719463021018362527198358286721239529091637248252469435642287693207506339068528700205,
    -0.7198818501716108268489402178319472447581380033149019526220473151184468592486433646042300919262498902882179891494724046747921544602557246455427317830132976771174504209146835854012577372395960646854355024460204286901035470812684876587693044068989973704915078171158689213412715251485203442313,
    0.7198818501716108268489402178319472447581380033149019526220473151184468592486433646042300919262498902882179891494724046747921544602557246455427317830132976771174504209146835854012577372395960646854355024460204286901035470812684876587693044068989973704915078171158689213412715251485203442313,
    -0.7528199072605318966118637748856939855517142713220871932461987761167722639636968539390413583009467924995905147153923286347693864945784890119950315095740891764880991728646942920208355501445550654259850385377192973526980795946453961077798744753892199929235882097232836682421729944934586281945,
    0.7528199072605318966118637748856939855517142713220871932461987761167722639636968539390413583009467924995905147153923286347693864945784890119950315095740891764880991728646942920208355501445550654259850385377192973526980795946453961077798744753892199929235882097232836682421729944934586281945,
    -0.7839723589433414076102205252137682840564141249898259334132759617476816578705098509357116190608002325895348207611752987335385494893726027026038902508685496606160441965948835252795524014713290879877269643684102005605450140247125536147801312017065532602835003540212221564314236937509990182173,
    0.7839723589433414076102205252137682840564141249898259334132759617476816578705098509357116190608002325895348207611752987335385494893726027026038902508685496606160441965948835252795524014713290879877269643684102005605450140247125536147801312017065532602835003540212221564314236937509990182173,
    -0.8132653151227975597419233380863033406981418225655972166956485149356586346082019870309280128411412936411423614767918756843380999442447282903502051218203273573634847203121451086379808399639198510674436238195505371716160648058477202993836014352158139813219612968106205248494087577632573534973,
    0.8132653151227975597419233380863033406981418225655972166956485149356586346082019870309280128411412936411423614767918756843380999442447282903502051218203273573634847203121451086379808399639198510674436238195505371716160648058477202993836014352158139813219612968106205248494087577632573534973,
    -0.840629296252580362751691544695873302982489823801755353928202683075593465893922171840726147868117503717663799561956411215937924134571068943700343442753760445948626598735504632170407243376224222403038093781056024445977626666740664628412660960413062370047183186652885532589557452614451434048,
    0.840629296252580362751691544695873302982489823801755353928202683075593465893922171840726147868117503717663799561956411215937924134571068943700343442753760445948626598735504632170407243376224222403038093781056024445977626666740664628412660960413062370047183186652885532589557452614451434048,
    -0.8659993981540928197607833850701575024125019187582496425664279511808356713122188567857456842034906362573453815878913951040194915987006979015304835979058725276345799813088989383312475641092775164460639450521468294104011206574786429237252678172922104036725327539940502197291939132802457917836,
    0.8659993981540928197607833850701575024125019187582496425664279511808356713122188567857456842034906362573453815878913951040194915987006979015304835979058725276345799813088989383312475641092775164460639450521468294104011206574786429237252678172922104036725327539940502197291939132802457917836,
    -0.8893154459951141058534040382728516224291944615104521893194744566084811090577722526400445910623711480590529533188832105988657269430913287263821624762648137092066620632787986348052306840101775313644572400860845559833367997001666659907951051347410546710134120144598833115095140475669485797579,
    0.8893154459951141058534040382728516224291944615104521893194744566084811090577722526400445910623711480590529533188832105988657269430913287263821624762648137092066620632787986348052306840101775313644572400860845559833367997001666659907951051347410546710134120144598833115095140475669485797579,
    -0.9105221370785028057563806680083298610134880848883640292531723714467102234556291968179018775780308458024302103848451312741663820589200520720207891653884985710130867134073520525932445557074805974235006810370309087879564826639263972805682465506594098949560288847385983395160311034445386606259,
    0.9105221370785028057563806680083298610134880848883640292531723714467102234556291968179018775780308458024302103848451312741663820589200520720207891653884985710130867134073520525932445557074805974235006810370309087879564826639263972805682465506594098949560288847385983395160311034445386606259,
    -0.9295691721319395758214901545592256073474270144297154975928116833612430986265594515998834499355844736686512805129688214992047597092114291955925880175797899765980745854426738149516325837607227287481909072315347776012991222301207304052068204069335766550173941103055407746774520789612843561385,
    0.9295691721319395758214901545592256073474270144297154975928116833612430986265594515998834499355844736686512805129688214992047597092114291955925880175797899765980745854426738149516325837607227287481909072315347776012991222301207304052068204069335766550173941103055407746774520789612843561385,
    -0.9464113748584028160624814913472647952793949717952331902317789712973664402149436591260928179188420533516264142755452159723722786167537167514691534968355366202934342465086995943893699962972237343218079763936958985487264411542890941861254842843026890160131607678957282346112697993618567018237,
    0.9464113748584028160624814913472647952793949717952331902317789712973664402149436591260928179188420533516264142755452159723722786167537167514691534968355366202934342465086995943893699962972237343218079763936958985487264411542890941861254842843026890160131607678957282346112697993618567018237,
    -0.9610087996520537189186141218971572067621146110378459494461586158623919945488992563976780806866203786216001498788310714552847469661399216303755820947005848739467276644122915754949838610353627723679982220628115164983443994552616161584523205789167087822341423097206088828267065770404672828066,
    0.9610087996520537189186141218971572067621146110378459494461586158623919945488992563976780806866203786216001498788310714552847469661399216303755820947005848739467276644122915754949838610353627723679982220628115164983443994552616161584523205789167087822341423097206088828267065770404672828066,
    -0.9733268277899109637418535073522726680261452944551741758819139781978152256958453749994966038154125547612207903105020176172420237675899907788807087542221018040460410464083361271842759039530092449625891215101984663282728542290395875313124045226564547294745437773482395329023327909760431499638,
    0.9733268277899109637418535073522726680261452944551741758819139781978152256958453749994966038154125547612207903105020176172420237675899907788807087542221018040460410464083361271842759039530092449625891215101984663282728542290395875313124045226564547294745437773482395329023327909760431499638,
    -0.9833362538846259569312993021568311169452475066237403837464872131233426128415470535606559721330818003585532628124845662897410684694651251174207713020897795837892725294581710205598344576799985346970638130204876060998657059283079767876980544166132523941283823202290746667358872631036031924711,
    0.9833362538846259569312993021568311169452475066237403837464872131233426128415470535606559721330818003585532628124845662897410684694651251174207713020897795837892725294581710205598344576799985346970638130204876060998657059283079767876980544166132523941283823202290746667358872631036031924711,
    -0.9910133714767443207393823834433031136413494453907904852225427459378131658644129997345108950133770434340330151289100150097018332483423277136039914249575686591612502752158650205954671083696496347591169012794322303027309768195334920157669446268175983954105533989275308193580349506657360682085,
    0.9910133714767443207393823834433031136413494453907904852225427459378131658644129997345108950133770434340330151289100150097018332483423277136039914249575686591612502752158650205954671083696496347591169012794322303027309768195334920157669446268175983954105533989275308193580349506657360682085,
    -0.9963401167719552793469245006763991232098575063402266121352522199507030568202208530946066801021703916301511794658310735397567341036554686814952726523955953805437164277655915410358813984246580862850974195805395101678543649116458555272523253307828290553873260588621490898443701779725568118502,
    0.9963401167719552793469245006763991232098575063402266121352522199507030568202208530946066801021703916301511794658310735397567341036554686814952726523955953805437164277655915410358813984246580862850974195805395101678543649116458555272523253307828290553873260588621490898443701779725568118502,
    -0.9993050417357721394569056243456363119697121916756087760628072954617646543505331997843242376462639434945376776512170265314011232493020401570891594274831367800115383317335285468800574240152992751785027563437707875403545865305271045717258142571193695943317890367167086616955235477529427992282,
    0.9993050417357721394569056243456363119697121916756087760628072954617646543505331997843242376462639434945376776512170265314011232493020401570891594274831367800115383317335285468800574240152992751785027563437707875403545865305271045717258142571193695943317890367167086616955235477529427992282
};

inline constexpr long double w[64] = {
    0.0486909570091397203833653907347499124426286922838743305086688042456914190998246107310291565645676057401607079939845156005172257043376703767287395573765236401039685866479381075274920900511719320271157129622463682509122641788910270632229694394595885032921037399187298767076084601033342936131,
    0.0486909570091397203833653907347499124426286922838743305086688042456914190998246107310291565645676057401607079939845156005172257043376703767287395573765236401039685866479381075274920900511719320271157129622463682509122641788910270632229694394595885032921037399187298767076084601033342936131,
    0.0485754674415034269347990667839781136875565447049294857111516761025158193093697039229163427633930410186232149083923688162761488505704450697417589593116703853157329164894580165517236877241308351214870169600093357854651930986960906313726182992933363325614247750209880050786299287510692780499,
    0.0485754674415034269347990667839781136875565447049294857111516761025158193093697039229163427633930410186232149083923688162761488505704450697417589593116703853157329164894580165517236877241308351214870169600093357854651930986960906313726182992933363325614247750209880050786299287510692780499,
    0.048344762234802957169769527158017809703692550609501080629442201445249828946429202156764153264348308119169811534137999799779908820312744765416129733427088646813066886130539178187597540312913636916139844188190193872629488730769015964208394624398401975043997268903006190530430762197842013971,
    0.048344762234802957169769527158017809703692550609501080629442201445249828946429202156764153264348308119169811534137999799779908820312744765416129733427088646813066886130539178187597540312913636916139844188190193872629488730769015964208394624398401975043997268903006190530430762197842013971,
    0.0479993885964583077281261798713460699543167134714936209446323930933335214619650277588138568504103427609283146728470455041360837549685364869161566863222680599110109210456299588352028330169041000166382937545505655464884266691630625402297821494221827392164049587946530563778771030124675514431,
    0.0479993885964583077281261798713460699543167134714936209446323930933335214619650277588138568504103427609283146728470455041360837549685364869161566863222680599110109210456299588352028330169041000166382937545505655464884266691630625402297821494221827392164049587946530563778771030124675514431,
    0.0475401657148303086622822069442231716408252512625387521584740318784735191312349586041971325618543660076682369564304738487584849740943805934034367382833518752314207901993991333786062812015195073547884746598535775062676699885664167707011249029305697669004958515813436770491520105115843742005,
    0.0475401657148303086622822069442231716408252512625387521584740318784735191312349586041971325618543660076682369564304738487584849740943805934034367382833518752314207901993991333786062812015195073547884746598535775062676699885664167707011249029305697669004958515813436770491520105115843742005,
    0.0469681828162100173253262857545810751998975284738125649829240886861900500181800807437012381630302198876925642461830694029139318555787845567143614289552410495903601238284556145544858090965965782916339169651505119399637862876053945518410353459767034026687936026945199383607112976484520939933,
    0.0469681828162100173253262857545810751998975284738125649829240886861900500181800807437012381630302198876925642461830694029139318555787845567143614289552410495903601238284556145544858090965965782916339169651505119399637862876053945518410353459767034026687936026945199383607112976484520939933,
    0.0462847965813144172959532492322611849696503075324468007778340818364698861774606986244241539105685321088517142947579291476238551538798963436740600968513359005801910700069462154098456091711311098901749803777735222026075473081311483686560830539773763176758567914860207820170792365910140063798,
    0.0462847965813144172959532492322611849696503075324468007778340818364698861774606986244241539105685321088517142947579291476238551538798963436740600968513359005801910700069462154098456091711311098901749803777735222026075473081311483686560830539773763176758567914860207820170792365910140063798,
    0.0454916279274181444797709969712690588873234618023998968168834081606504637618082102750954507142497706775055424364453740562113890878382679420378787427100982909191308430750899201141096789461078632697297091763378573830284133736378128577579722120264252594541491899441765769262904055702701625378,
    0.0454916279274181444797709969712690588873234618023998968168834081606504637618082102750954507142497706775055424364453740562113890878382679420378787427100982909191308430750899201141096789461078632697297091763378573830284133736378128577579722120264252594541491899441765769262904055702701625378,
    0.0445905581637565630601347100309448432940237999912217256432193286861948363377761089569585678875932857237669096941854082976565514031401996407675401022860761183118504326746863327792604337217763335682212515058414863183914930810334329596384915832703655935958010948424747251920190851700662833367,
    0.0445905581637565630601347100309448432940237999912217256432193286861948363377761089569585678875932857237669096941854082976565514031401996407675401022860761183118504326746863327792604337217763335682212515058414863183914930810334329596384915832703655935958010948424747251920190851700662833367,
    0.0435837245293234533768278609737374809227888974971180150532193925502569499020021803936448815937567079991401855477391110804568848623412043870399620479222000249538880795788245633051476595555730388360811011823841525667998427392843673284072004068821750061964976796287623004834501604656318714989,
    0.0435837245293234533768278609737374809227888974971180150532193925502569499020021803936448815937567079991401855477391110804568848623412043870399620479222000249538880795788245633051476595555730388360811011823841525667998427392843673284072004068821750061964976796287623004834501604656318714989,
    0.0424735151236535890073397679088173661655466481806496697314607722055245433487169327182398988553670128358787507582463602377168227019625334754497484024668087975720049504975593281010888062806587161032924284354938115463233015024659299046001504100674918329532481611571863222497170398830691222425,
    0.0424735151236535890073397679088173661655466481806496697314607722055245433487169327182398988553670128358787507582463602377168227019625334754497484024668087975720049504975593281010888062806587161032924284354938115463233015024659299046001504100674918329532481611571863222497170398830691222425,
    0.0412625632426235286101562974736380477399306355305474105429034779122704951178045914463267035032832336161816547420067160277921114474557623647771372636679857599931025531633255548770293397336318597716427093310378312957479805159734598610664983115148350548735211568465338522875618805992499897174,
    0.0412625632426235286101562974736380477399306355305474105429034779122704951178045914463267035032832336161816547420067160277921114474557623647771372636679857599931025531633255548770293397336318597716427093310378312957479805159734598610664983115148350548735211568465338522875618805992499897174,
    0.0399537411327203413866569261283360739186769506703336301114037026981570543670430333260307390357287606111017588757685176701688554806178713759519003171090525332423003042251947304213502522332118258365256241174986409729902714098049024753746340158430732115642207673265332738358717839602955875715,
    0.0399537411327203413866569261283360739186769506703336301114037026981570543670430333260307390357287606111017588757685176701688554806178713759519003171090525332423003042251947304213502522332118258365256241174986409729902714098049024753746340158430732115642207673265332738358717839602955875715,
    0.0385501531786156291289624969468089910127871122017180319662378854088005271323682681394418540442928363090545214563022868422017877042243007014244875098498616146404178795110038170109976252865902624380463581094085479557660525450020049773872343621719025128277593787164021147974906095237533202082,
    0.0385501531786156291289624969468089910127871122017180319662378854088005271323682681394418540442928363090545214563022868422017877042243007014244875098498616146404178795110038170109976252865902624380463581094085479557660525450020049773872343621719025128277593787164021147974906095237533202082,
    0.0370551285402400460404151018095833750834649453056563021747536272028091562122966687178302646649066832960609370472485057031765338738734008482025086366647963664178752038995704175623165041724901843573087856883034472545386037691055680911138721623610172486110313241291773258491882452773847899443,
    0.0370551285402400460404151018095833750834649453056563021747536272028091562122966687178302646649066832960609370472485057031765338738734008482025086366647963664178752038995704175623165041724901843573087856883034472545386037691055680911138721623610172486110313241291773258491882452773847899443,
    0.0354722132568823838106931467152459479480946310024100946926514848199381113651392962399922996268087884509143420993419937430515415557908457195618550238075571721209638845910166697234073788332647695349442265578792857058786796417110738673392400570019770741873271724201517438135222598792344040215,
    0.0354722132568823838106931467152459479480946310024100946926514848199381113651392962399922996268087884509143420993419937430515415557908457195618550238075571721209638845910166697234073788332647695349442265578792857058786796417110738673392400570019770741873271724201517438135222598792344040215,
    0.0338051618371416093915654821107254310210499263140045346675500650400323727745785853730452808963944098691936344225349051741060036935288424090581463711756382878498537611980973238606529148664990420534952057130296232922368792280098852092993207644225150541876980292972087619863453425206929192216,
    0.0338051618371416093915654821107254310210499263140045346675500650400323727745785853730452808963944098691936344225349051741060036935288424090581463711756382878498537611980973238606529148664990420534952057130296232922368792280098852092993207644225150541876980292972087619863453425206929192216,
    0.032057928354851553585467504347898716966221573881398062250169407854535275399124366530227987935629046729162364779969274126431870966979526186907589490002269660893281421728773647001279141626157958271220102615163092206489916992120482595587916535390136003611498634162765724522022671474313619317,
    0.032057928354851553585467504347898716966221573881398062250169407854535275399124366530227987935629046729162364779969274126431870966979526186907589490002269660893281421728773647001279141626157958271220102615163092206489916992120482595587916535390136003611498634162765724522022671474313619317,
    0.030234657072402478867974059819548659158281397768481241636026542045969161851838118212761980885178641520596873511042783163461341979185470882574743804555268086640389062237383427702813367624714014426121485626242067362445894463989335423458464954799181190120473168677930333898873084606011285311,
    0.030234657072402478867974059819548659158281397768481241636026542045969161851838118212761980885178641520596873511042783163461341979185470882574743804555268086640389062237383427702813367624714014426121485626242067362445894463989335423458464954799181190120473168677930333898873084606011285311,
    0.0283396726142594832275113052002373519812075841257543359907955185084500175712880712901834579816476269393013386531176072296695948860841466158639973753393323262188023471133258509422081952937349849822864752636994881600343083839805990853930436233762729622213044478376753949590318846038229829528,
    0.0283396726142594832275113052002373519812075841257543359907955185084500175712880712901834579816476269393013386531176072296695948860841466158639973753393323262188023471133258509422081952937349849822864752636994881600343083839805990853930436233762729622213044478376753949590318846038229829528,
    0.0263774697150546586716917926252251856755993308422457184496156736853021592428967790284780487213653480867620409279447766944383920384284787790772384251090745670478105870527396429136326932261251511732466974897397268573168068852344129736214469830280087710575094607457344820944885011053938108899,
    0.0263774697150546586716917926252251856755993308422457184496156736853021592428967790284780487213653480867620409279447766944383920384284787790772384251090745670478105870527396429136326932261251511732466974897397268573168068852344129736214469830280087710575094607457344820944885011053938108899,
    0.0243527025687108733381775504090689876499784155133784119819985685535536787083770723737264828464464223276155821319330210193549896426801083040150047332857692873011433649334477370145389017577189505240415125600908800786897201425473757275187332157593198572919772969833130729981971352463730545469,
    0.0243527025687108733381775504090689876499784155133784119819985685535536787083770723737264828464464223276155821319330210193549896426801083040150047332857692873011433649334477370145389017577189505240415125600908800786897201425473757275187332157593198572919772969833130729981971352463730545469,
    0.0222701738083832541592983303841550024229592905997594051455205429744914460867081990116647982811451138592401156680063927909718825845915896692701716212710541472344073624315399429951255221519263275095347974129106415903376085208797420439500915674568159744176912567285070988940509294826076696882,
    0.0222701738083832541592983303841550024229592905997594051455205429744914460867081990116647982811451138592401156680063927909718825845915896692701716212710541472344073624315399429951255221519263275095347974129106415903376085208797420439500915674568159744176912567285070988940509294826076696882,
    0.0201348231535302093723403167285438970895266801007919519220072343276769828211923597982299498416998597995443052252531684909219367615574440281549241161294448697202959593344989612626641188010558013085389491205901106884167596038790695150496733123662891637942237462337673353651179115491957031948,
    0.0201348231535302093723403167285438970895266801007919519220072343276769828211923597982299498416998597995443052252531684909219367615574440281549241161294448697202959593344989612626641188010558013085389491205901106884167596038790695150496733123662891637942237462337673353651179115491957031948,
    0.0179517157756973430850453020011193688971673570364158572977184273569247295870620984743089140579199272107974903016785911970727080884655646148340637373001805876560334052431930062983734905886704331100259778249929425439377011315288821865303197904492848823994202996722656114004109123107733596987,
    0.0179517157756973430850453020011193688971673570364158572977184273569247295870620984743089140579199272107974903016785911970727080884655646148340637373001805876560334052431930062983734905886704331100259778249929425439377011315288821865303197904492848823994202996722656114004109123107733596987,
    0.0157260304760247193219659952975397944260290098431565121528943932284210502164124556525745628476326997189475680077625258949765335021586482683126547283634704087193102431454662772463321304938516661086261262080252305539171654570677889578063634007609097342035360186636479612243231917699790225637,
    0.0157260304760247193219659952975397944260290098431565121528943932284210502164124556525745628476326997189475680077625258949765335021586482683126547283634704087193102431454662772463321304938516661086261262080252305539171654570677889578063634007609097342035360186636479612243231917699790225637,
    0.0134630478967186425980607666859556841084257719773496708184682785221983598894666268489697837056105038485845901773961664652581563686185523959473293683490869846700009741156668864960127745507806046701586435579547632680339906665338521813319281296935586498194608460412423723103161161922347608637,
    0.0134630478967186425980607666859556841084257719773496708184682785221983598894666268489697837056105038485845901773961664652581563686185523959473293683490869846700009741156668864960127745507806046701586435579547632680339906665338521813319281296935586498194608460412423723103161161922347608637,
    0.011168139460131128818590493019208135072778797816827287215251362273969701224836131369547661822970774719521543690039908073147476182135228738610704246958518755712518444434075738269866120460156365855324768445411463643114925829148750923090201475035559533993035986264487097245733097728698218563,
    0.011168139460131128818590493019208135072778797816827287215251362273969701224836131369547661822970774719521543690039908073147476182135228738610704246958518755712518444434075738269866120460156365855324768445411463643114925829148750923090201475035559533993035986264487097245733097728698218563,
    0.0088467598263639477230309146597306476951762660792204997984715769296110380005985367341694286322550520156167431790573509593010611842062630262878798782558974712042810219159674181580449655112696028911646066461502678711637780164986283350190669684468398617127841853445303466680698660632269500149,
    0.0088467598263639477230309146597306476951762660792204997984715769296110380005985367341694286322550520156167431790573509593010611842062630262878798782558974712042810219159674181580449655112696028911646066461502678711637780164986283350190669684468398617127841853445303466680698660632269500149,
    0.0065044579689783628561173603999812667711317610549523400952448792575685125717613068203530526491113296049409911387320826711045787146267036866881961532403342811327869183281273743976710008917886491097375367147212074243884772614562628844975421736416404173672075979097191581386023407454532945934,
    0.0065044579689783628561173603999812667711317610549523400952448792575685125717613068203530526491113296049409911387320826711045787146267036866881961532403342811327869183281273743976710008917886491097375367147212074243884772614562628844975421736416404173672075979097191581386023407454532945934,
    0.0041470332605624676352875357285514153133028192536848024628763661431834776690157393776820933106187137592011723199002845429836606307797425496666456172753165824787973801175029578301513761259541022471768825518482406145696380621686627285992715643614469568410535180218496973657001203470470418364,
    0.0041470332605624676352875357285514153133028192536848024628763661431834776690157393776820933106187137592011723199002845429836606307797425496666456172753165824787973801175029578301513761259541022471768825518482406145696380621686627285992715643614469568410535180218496973657001203470470418364,
    0.0017832807216964329472960791449719331799593472719279556695308063655858546954239803486698215802150348282744786016134857283616955449868451969230490863774274598030023211055562492709717566919237924255297982774711177411074145151155610163293142044147991553384925940046957893721166251082473659733,
    0.0017832807216964329472960791449719331799593472719279556695308063655858546954239803486698215802150348282744786016134857283616955449868451969230490863774274598030023211055562492709717566919237924255297982774711177411074145151155610163293142044147991553384925940046957893721166251082473659733
};



template<typename _Ty>
requires(is_decimal_v<_Ty>)
_NODISCARD bool inline isEqual( _Ty a,  _Ty b, _Ty epsilon = static_cast<_Ty>(10E-9))noexcept {

    return std::abs(a - b) < epsilon;
}
template<typename _Ty>
requires(is_decimal_v<_Ty>)
_NODISCARD inline std::optional<std::vector<_Ty>> gauss_elim(std::vector<std::vector<_Ty>>& A,const std::vector<_Ty>& b) {//tes reference edo giati kaneis copy 
    const size_t& n = A.size(); // Number of equations (rows)
    if (n <= 0)return std::nullopt;
    // Augment the coefficient matrix with the right-hand side vector
    for (size_t i = 0; i < n; i++) {
        A[i].emplace_back(b[i]); // Appending the corresponding element from b to each row of A
    }
    /* for(int i=0; i<n; i++)
    {
        for(int j=0; j<A[0].size(); j++)
        {
            cout << A[i][j] << " ";
        }
        cout << endl;
    } */
    std::cout << '\n';
    // Perform Gaussian elimination
    for (size_t i = 0; i < n; i++) { // Loop over each row (equation)
        // Find the row with the maximum absolute value in the ith column and swap rows
        size_t max_row = i;
        for (size_t j = i + 1; j < n; j++) {
            if (std::abs(A[j][i]) > std::abs(A[max_row][i])) {
                max_row = j; // Update the index of the row with the maximum absolute value
            }
        }
        std::swap(A[i], A[max_row]); // Swap the current row with the row with the maximum absolute value
        // Perform row operations to eliminate coefficients below the pivot element
        for (size_t j = i + 1; j < n; j++) { // Loop over rows below the pivot row
            _Ty factor = A[j][i] / A[i][i]; // Compute the factor by which the pivot row will be multiplied
            for (size_t k = i; k < n + 1; k++) { // Loop over columns including the augmented column
                A[j][k] -= factor * A[i][k]; // Perform row operation to eliminate coefficients below the pivot element
            }
        }
    }
    if (isEqual<_Ty>(A[n - 1][n - 1], 0.0)) {
        return std::nullopt;
    }
    /*  for(int i=0; i<n; i++)
     {
         for(int j=0; j<A[0].size(); j++)
         {
             cout << A[i][j] << " ";
         }
         cout << endl;
     } */
     // Back-substitution to solve for x
    std::vector<_Ty> x(n, 0.0); // Initialize the solution vector x with zeros
    for (size_t i = n - 1; i > 0; i--) { // Start from the last equation and move upwards
        _Ty sum = 0.0;
        for (size_t j = i + 1; j < n; j++) { // Loop over elements to the right of the diagonal in the current row
            sum += A[i][j] * x[j]; // Compute the sum of products of coefficients and corresponding elements of x
        }
        if (isEqual<_Ty>(A[i][i], 0.0)) {
            return std::nullopt;
        }
        x[i] = (A[i][n] - sum) / A[i][i]; // Compute the value of x[i] using back-substitution
    }
    size_t i = 0;
    while (i == 0) {
        _Ty sum = 0.0;
        for (size_t j = i + 1; j < n; j++) {
            sum += A[i][j] * x[j];
        }
        if (isEqual<_Ty>(A[i][i], 0.0)) {
            return std::nullopt;
        }
        x[i] = (A[i][n] - sum) / A[i][i];
        break;
    }
    return std::optional{ x }; // Return the solution vector x
}

template <typename _Ty>
requires(is_decimal_v<_Ty>)
inline void print2DVector(const std::vector<std::vector<_Ty>>& vec) {
    const size_t& numRows = vec.size();
    const size_t& numCols = vec[0].size();
   
   
    // Print column headers
    std::cout << std::setw(12) << " ";
    for (size_t col = 0; col < numCols; ++col) {
        std::cout << std::setw(12) << col;
    }
    std::cout << '\n';
    // Print row headers and vector contents
    for (size_t row = 0; row < numRows; ++row) {
        std::cout << std::setw(12) << row;
        for (size_t col = 0; col < vec[row].size(); ++col) {
            std::cout << std::setw(12) << std::fixed << std::setprecision(6) << vec[row][col] << "("
                << row << "," << col << ")";
        }
        std::cout << '\n';
    }
}
template<typename _Ty>
requires(is_decimal_v<_Ty>)
inline void print_Vector(const std::vector<_Ty>& vec) {
    const size_t& numCols = vec.size();
   
    if (numCols <= 0) {
        std::cerr << "numCols>0" << '\n';
        return;
    }
    for (size_t col = 0; col < numCols; ++col) {
        std::cout << std::setw(12) << std::fixed << std::setprecision(6) << vec[col] << "(" << col
            << ")";
    }
    std::cout << '\n';
}
template<typename _Ty, typename u, typename v>
requires(is_decimal_v<_Ty>)
inline void finite_difference(  _Ty a, _Ty b,  _Ty h, u&& f, v&& ddf) {
    static_assert(std::is_same_v<std::invoke_result_t<decltype(f), _Ty>,_Ty>, "return type of f  must be a floating point type");
    static_assert(std::is_invocable_r_v<_Ty, u, _Ty>, "4th argument must be a callable that returns a floating point value and takes only one floating point value");

    static_assert(std::is_same_v<std::invoke_result_t<decltype(ddf), _Ty>, _Ty>, "return type of ddf must be a floating point type");
    static_assert(std::is_invocable_r_v<_Ty, v, _Ty>, "5th argument must be a callable that returns a floating point value and takes only one floating point value");
    _Ty xi{}, res{}, hsq{ static_cast<_Ty>(std::pow(h, 2)) };
    if (b < a||isEqual<_Ty>(b,a) || h < 0 || isEqual<_Ty>(h, 0.0)) {
        std::cerr << "b>a &&h>0" << '\n';
        return;
    }
    
    const size_t& n{ static_cast<size_t>((b - a) / h + 1) };
    xi = a;
    
    for (size_t i = 0; i < n; i++) {
        res = (std::invoke(f, xi - h) - 2 * std::invoke(f, xi) + std::invoke(f, xi + h)) / hsq;
        std::cout << xi << " " << res << " " << std::invoke(ddf, xi) << " " << std::abs(std::invoke(ddf, xi) - res) << '\n';
        xi += h;
    }

}



template<typename _Ty, typename u>
requires(is_decimal_v<_Ty>)
_NODISCARD inline std::optional<_Ty> dicection(_Ty a, _Ty b, u&& f, _Ty e = static_cast<_Ty>(1.0E-8))//u is the callable
{
    static_assert(std::is_same_v<std::invoke_result_t<decltype(f), _Ty>, _Ty>, "return type of f must be a floating point type");
    static_assert(std::is_invocable_r_v<_Ty, u, _Ty>, "3rd argument must be a callable that returns a floating point value and takes only one floating point value");

    if (b < a||isEqual<_Ty>(b,a) || e < 0||isEqual<_Ty>(e,0.0)) {
        return std::nullopt;
    }
    _Ty d = b - a, c{}; //[a,b] interval ,d interval span ,e precision

    while (true)
    {
        d *= 0.5;
        if (std::signbit(std::invoke(f, a)) == std::signbit(std::invoke(f, b)) || d < e || isEqual<_Ty>(d, e))
        {
            std::cout << "Not found in interval: " << "[" << a << "," << b << "]";
            return std::nullopt;
        }
        c = static_cast<_Ty>(a + (b - a) * 0.5);
        std::cout << a << " " << b << " " << c << " " << d << " " << f(c) << '\n';
        if (std::abs(std::invoke(f, c) - 0) < 10e-6) //Smaller precision for the final result 
        {

            return std::optional{ c };
        }
        if (std::signbit(std::invoke(f, c)) == std::signbit(std::invoke(f, a))) //if(f(c) * f(a) > 0) is going to produce overflow if f(a) or f(c) is  small number
        {

            a = c;

        }
        else
        {

            b = c;
        }
    }
}

template<typename _Ty, typename u>
requires(is_decimal_v<_Ty>)
_NODISCARD inline std::optional<_Ty> trapezoid_integral( _Ty a,  _Ty b,  _Ty dx, u&& f) {
    static_assert(std::is_same_v<std::invoke_result_t<decltype(f), _Ty>, _Ty>, "return type of f must be the same with a,b,dx args");
    static_assert(std::is_invocable_r_v<_Ty, u, _Ty>, "3rd argument must be a callable that returns a floating point value and takes only one floating point value");
    if (b < a||isEqual<_Ty>(b,a) || dx < 0||isEqual<_Ty>(dx,0.0)) {
        std::cerr << "b>a &&dx>0" << '\n';
        return std::nullopt;
    }
    

    const size_t& iterations = static_cast<size_t>((b - a) / dx);

    _Ty result = 0;
    _Ty xi = a;
    for (size_t i = 0; i < iterations; i++) {
        result += static_cast<_Ty>((std::invoke(f, xi + dx) + std::invoke(f, xi)) * (dx * 0.5));
        std::cout << xi << "-" << xi + dx << " " << result << '\n';
        xi += dx;
    }

    return std::optional{ result };
}

template<typename _Ty, typename u>
requires(is_decimal_v<_Ty>)
_NODISCARD std::optional<_Ty> simpson( _Ty a,   _Ty b,   _Ty dx, u&& f) {
    static_assert(std::is_same_v<std::invoke_result_t<decltype(f), _Ty>, _Ty>, "return type of f must be the same with  a,b,dx args");
    static_assert(std::is_invocable_r_v<_Ty, u, _Ty>, "4rd argument must be a callable that returns a floating point value and takes only one floating point value");
    if (b < a||isEqual<_Ty>(b,a) || dx < 0||isEqual<_Ty>(dx,0.0)) {
        std::cerr << "b>a &&dx>0" << '\n';
        return std::nullopt;
    }

    const size_t& iterations = static_cast<size_t>((b - a) / dx);
    _Ty result = 0;
    _Ty xi = a;

    for (size_t i = 0; i < iterations; i++)
    {
        result += (dx / 6) * (std::invoke(f, xi) + 4 * std::invoke(f, (xi + (xi + dx)) * 0.5) + std::invoke(f, xi + dx));
        std::cout << xi << "-" << xi + dx << " " << result << '\n';
        xi += dx;
    }

    return std::optional{ result };
}
template<typename _Ty>
requires(is_decimal_v<_Ty>)
_NODISCARD inline  std::optional<bool>strict_diagonal_dominace(const std::vector<std::vector<_Ty>>& A)//Pass it as refrence so you dont need copy,also add const if you dont goining to modify
{
    _Ty sum = 0;
    const size_t& n = A.size();
    if (n <= 0) {
        std::cerr << "vector must be nxn with n>0" << '\n';
        return std::nullopt;
    }

    for (size_t i = 0; i < n; i++)
    {
        sum = 0;//Reset the sum for new row
        if (A[i].size() != n) {
            std::cerr << "vector must be nxn with n>0" << '\n';
            return std::nullopt;
        }

        for (size_t j = 0; j < A[i].size(); j++)
        {
            if (i != j) { sum += A[i][j]; } //Sum the values except the diagonal
            else { continue; }
        }
        if (std::abs(A[i][i]) < std::abs(sum) || isEqual<_Ty>(std::abs(A[i][i]), std::abs(sum))) //Check if one diagonal element is smaller than the sum
        {
            return std::optional{ false };
        }
    }
    return std::optional{ true };
}
template<typename _Ty>
requires(is_decimal_v<_Ty>)
_NODISCARD  inline std::optional<_Ty> better_sum(_Ty n){
    if (n < 0||isEqual<_Ty>(n,0.0)) {
        std::cerr << "b must be greater than zero\n";
        return std::nullopt;
    }

    _Ty sum = 1.0 / (std::pow(n, 2) + n);
    for (size_t i = 1; i < n; i++)
    {
        sum += 1.0 / ((n - i) * (n - i + 1));
    }
    sum += 1.0;
    return std::optional{ sum };
}



//Algorithm from page 159 dougalis
//Slower implementation but more organized code
template<typename _Ty>
requires(is_decimal_v<_Ty>)
_NODISCARD inline std::optional<_Ty> fi( _Ty x, const std::vector<_Ty>& knot,  size_t i)noexcept
{
    if (knot.size() == 0)return std::nullopt;

    if (i == 0) //First function
    {
        if ((x > knot[0] || isEqual<_Ty>(x, knot[0])) && (x < knot[1] || isEqual<_Ty>(x, knot[1])))
        {
            //cout << "case1";
            if (isEqual<_Ty>(knot[1] - knot[0],0.0)){
                return std::nullopt;
            }
            return std::optional{ -(x - knot[1]) / (knot[1] - knot[0]) };
        }
        else
        {
            return std::optional<_Ty>{ 0 };
        }
    }
    //For every other function
    if (i != 0 || i != knot.size() - 1)
    {
        if ((x > knot[i - 1] || isEqual<_Ty>(x, knot[i - 1])) && (x < knot[i] || isEqual<_Ty>(x, knot[i])))
        {
            //cout << "case2";
            if (isEqual<_Ty>(knot[i] - knot[i-1],0.0)){
                return std::nullopt;
            }
            return std::optional{ (x - knot[i - 1]) / (knot[i] - knot[i - 1]) };
        }
        else if ((x > knot[i] || isEqual<_Ty>(x, knot[i])) && (x < knot[i + 1] || isEqual<_Ty>(x, knot[i + 1])))
        {
            //cout << "case3";
            if (isEqual<_Ty>(knot[i+1] - knot[i],0.0)){
                return std::nullopt;
            }
            return std::optional{ -(x - knot[i + 1]) / (knot[i + 1] - knot[i]) };
        }
        else
        {
            return std::optional< _Ty>{ 0 }; //No support at that x
        }
    }


    if (i == knot.size() - 1) //Last fucntion
    {
        if ((x > knot[knot.size() - 2] || isEqual<_Ty>(x, knot[knot.size() - 2])) && (x < knot[knot.size() - 1] || isEqual<_Ty>(x, knot[knot.size() - 1])))
        {
            //cout << "case4";
            if (isEqual<_Ty>(knot[knot.size() - 1] - knot[knot.size() - 2],0.0)){
                return std::nullopt;
            }
            return std::optional{ (x - knot[knot.size() - 2]) / (knot[knot.size() - 1] - knot[knot.size() - 2]) };
        }
        else
        {
            return std::optional< _Ty>{0};
        }
    }

    return std::nullopt;


}

//Faster implementation
template<typename _Ty>
requires(is_decimal_v< _Ty>)
_NODISCARD inline std::optional< _Ty> fi2(_Ty x, const std::vector<_Ty>& knot,  size_t i)noexcept
{
    if (knot.size() == 0)return std::nullopt;
    if (i > 0&& i<knot.size())
        if ((x > knot[i - 1] || isEqual<_Ty>(x, knot[i - 1])) && (x < knot[i] || isEqual<_Ty>(x, knot[i])))
        {
            if (isEqual<_Ty>(knot[i] - knot[i-1],0.0)){
                return std::nullopt;
            }
            return std::optional{ (x - knot[i - 1]) / (knot[i] - knot[i - 1]) };
        }
    if (i != knot.size() - 1)
        if ((x > knot[i] || isEqual<_Ty>(x, knot[i])) && (x < knot[i + 1] || isEqual<_Ty>(x, knot[i + 1])))
        {
            if (isEqual<_Ty>(knot[i+1] - knot[i],0.0)){
                return std::nullopt;
            }
            return std::optional{ -(x - knot[i + 1]) / (knot[i + 1] - knot[i]) };
        }

    if (i >= 0 && i < knot.size())
    {
        return std::optional<_Ty>{ 0 };
    }
    return std::nullopt;
}
template<typename _Ty>
requires(is_decimal_v<_Ty>)
_NODISCARD inline  std::optional<std::vector<_Ty>> Cholesky_method(const std::vector<std::vector<_Ty>>&A, const std::vector<_Ty>& b) {
    if (A.size() <= 0||A.size()!=b.size())return std::nullopt;
    std::vector<std::vector<_Ty>> L(A.size(), std::vector<_Ty>(A.size())), Lt(A.size(), std::vector<_Ty>(A.size()));
    std::vector<_Ty> x(L.size()), y(L.size());
    for (size_t i = 0; i < A.size();i++) {
        if (A.size() != A[i].size()) {
            std::cout << "Not a square matrix\n";
            return std::nullopt;
        }
    }
   
    
    std::vector<std::vector<_Ty>> At(A.size(), std::vector<_Ty>(A.size()));
    //Transpose the A into At
    for (size_t i = 0; i < At.size(); i++) {
        for (size_t j = 0; j < At[0].size(); j++) {
            At[i][j] = A[j][i];
        }
    }
    if (A != At) {//Checks for symmetric A ,A=At
        std::cout << "Not symetric A";
        return std::nullopt;
    }
    //Decomposition of A into lower triangular based on the formula (3.24) page 95 Numerical Analysis Dougalis
    _Ty sum = 0, sum2 = 0, sum_x = 0, sum_k = 0;
    for (size_t i = 0; i < A.size(); i++) {
        for (size_t j = 0; j < i; j++) {
            for (size_t k = 0; k < j; k++) {
                sum += L[i][k] * L[j][k];
            }
           
            L[i][j] = (A[i][j] - sum) / L[j][j];
            sum = 0;
        }
        for (size_t g = 0; g < i; g++) {
            sum2 += L[i][g]*L[i][g];
        }
        if (A[i][i] - sum2 < 0)return std::nullopt;
        L[i][i] = std::sqrt(A[i][i] - sum2);
        if (L[i][i] < 0) {//Check for positive definite of A based on the decomposition of L Lt

            std::cout << "A is not positive definite";
            return std::nullopt;
        }
        sum2 = 0;
    }
    for (size_t i = 0; i < Lt.size(); i++) { //Build the L transpose Lt
        for (size_t j = 0; j < Lt[0].size(); j++) {
            Lt[i][j] = L[j][i];
        }
    }
    for (size_t i = 0; i < L.size(); i++) { //Foward substitution L y= b
        for (size_t j = 0; j < i; j++) {
            sum_x += L[i][j] * y[j];
        }
        if (isEqual<_Ty>(L[i][i], 0.0)) {
            return std::nullopt;
        }
        y[i] = (b[i] - sum_x) / L[i][i];
        sum_x = 0;
    }
    x[x.size() - 1] = y[y.size() - 1] / Lt[Lt.size() - 1][Lt.size() - 1];
    for (size_t k = L.size() - 2; k > 0; k--) {//Backwards substitution Lt x = y
        for (size_t j = k + 1; j <= Lt.size() - 1; j++) {
            sum_k += Lt[k][j] * x[j];
        }
        if (isEqual<_Ty>(Lt[k][k], 0.0))return std::nullopt;
        x[k] = (y[k] - sum_k) / Lt[k][k];
        sum_k = 0;
    }
    size_t k = 0;
    while (k == 0) {
        for (size_t j = k + 1; j <= Lt.size() - 1; j++) {
            sum_k += Lt[k][j] * x[j];
        }
        if (isEqual<_Ty>(Lt[k][k], 0.0))return std::nullopt;
        x[k] = (y[k] - sum_k) / Lt[k][k];
        sum_k = 0;
        break;
    }
    return std::optional{ x };
}
template<typename _Ty, typename u, typename v>
requires(is_decimal_v<_Ty>)
_NODISCARD inline std::optional<_Ty> finite_diff_central( _Ty a,  _Ty b,  _Ty h, u&& f, v&& y) {
    static_assert(std::is_same_v<std::invoke_result_t<decltype(f), _Ty, _Ty>, _Ty>, "return type of f  must be the same with a,b,h args");
    static_assert(std::is_invocable_r_v<_Ty, u, _Ty, _Ty>, "4th argument must be a callable that returns a floating point value and takes only one floating point value");

    static_assert(std::is_same_v<std::invoke_result_t<decltype(y), _Ty>, _Ty>, "return type of y  must be the same with a,b,h args");
    static_assert(std::is_invocable_r_v<_Ty, v, _Ty>, "5th argument must be a callable that returns a floating point value and takes only one floating point value");

    _Ty xi, hsq, max = -1, sum = 0; //Utility variables
    _Ty  y_a = 0, y_b = static_cast<_Ty>(std::exp(-2.0)), q = 2;
    if (h<0 ||isEqual<_Ty>(h,0.0))return std::nullopt;
    if (b - a < 0||isEqual<_Ty>(b,a))return std::nullopt;
    size_t n = static_cast<size_t>((b - a) / h + 1);
    std::optional<std::vector<_Ty>> U;
    std::vector<_Ty>F(n); //Solution vector U,Right hand side F
    std::vector<std::vector<_Ty>> A(n, std::vector<_Ty>(n, 0));
    xi = a;
    hsq = h * h; //Single time calculation of h squared
    for (size_t i = 0; i < n; i++)
    {
        //Build the right hand side 
        F[i] = std::invoke(f, xi, q) * hsq;
        //Build the left hand side 
        for (size_t g = 0; g < n; g++)
        {
            if (i == g) { A[i][g] = 2 + hsq * q; }
            else if (i == g - 1 || i == g + 1) { A[i][g] = -1; }
        }
        xi += h; //Increment the xi for the next iteration 
    }
    F[0] = y_a;
    F[n - 1] = y_b;
    U = gauss_elim(A, F);
    if (!U.has_value())return std::nullopt;
    std::vector<_Ty>x = std::move(U.value());
    xi = a; //Reset
    for (size_t i = 0; i < n; i++)
    {
        sum += static_cast<_Ty>(std::sqrt(std::pow(std::abs(x[i] - std::invoke(y, xi)), 2)));
        std::cout << xi << " " << std::invoke(y, xi) << " " << x[i] << '\n';
        if (std::abs(x[i] - std::invoke(y, xi)) > max) //Find max difference
        {
            max = std::abs(x[i] - std::invoke(y, xi));
        }
        xi += h; //Increment the xi for the next iteration 
    }
    return std::optional{ h * sum };
}
template<typename _Ty, typename u>
requires(is_decimal_v<_Ty>)
_NODISCARD inline  _Ty derivative(u&& f,  _Ty x0, int order,  _Ty delta = static_cast<_Ty>(1.0E-8)) //Numerical differation
{
    static_assert(std::is_same_v<std::invoke_result_t<decltype(f), _Ty>, _Ty>, "return type of f  must be the same with x0 and delta args");
    static_assert(std::is_invocable_r_v<_Ty, u, _Ty>, "4th argument must be a callable that returns a floating point value and takes only one floating point value");
    _Ty x1 = x0 - delta;
    _Ty x2 = x0 + delta;
    if (order == 1) {
        _Ty y1 = std::invoke(f, x1);
        _Ty y2 = std::invoke(f, x2);
        if (isEqual<_Ty>(x2 - x1, 0.0))throw divisionWithZero{ "division with zero\n" };
        return  (y2 - y1) / (x2 - x1);
    }
    else {
        _Ty  y1 = derivative(f, x1, order - 1);
        _Ty  y2 = derivative(f, x2, order - 1);
        if (isEqual<_Ty>(x2 - x1, 0.0))throw divisionWithZero{ "division with zero\n" };
        return  (y2 - y1) / (x2 - x1);
    }
}
template<typename _Ty, typename u>
requires(is_decimal_v<_Ty>)
inline void  finite_diff( _Ty a,   _Ty b,  _Ty h, u&& f) {
    static_assert(std::is_same_v<std::invoke_result_t<decltype(f), _Ty>, _Ty>, "return type of f  must be the same with a,b,h");
    static_assert(std::is_invocable_r_v<_Ty, u, _Ty>, "4th argument must be a callable that returns a floating point value and takes only one floating point value");
    if (b - a < 0 ||isEqual<_Ty>(b,a))return;
    if (h < 0||isEqual<_Ty>(h,0.0))return;
    size_t n = static_cast<size_t>((b - a) / h + 1);
    _Ty xi = a;
    _Ty hsq = h * h;
    _Ty result{};
    for (size_t i = 0; i < n; i++)
    {
        result =static_cast<_Ty>( (std::invoke(f,xi - h) - 2 *std::invoke (f,xi) +std::invoke(f,xi + h)) / hsq); //Finite difference
        auto d1 = derivative(f, xi, 2);

        std::cout << xi << " " << result << " " << d1 << " " << std::abs(d1 - result) << '\n';

        xi += h; //Increment the xi for the next iteration 
    }
    return;

}

// Helper function
template<typename _Ty>
    requires(is_decimal_v<_Ty>)
_NODISCARD _Ty gdiv(_Ty a, _Ty b)
{
    if (isEqual<_Ty>(a, 0.0) && isEqual<_Ty>(b, 0.0))
    {
        return(0.0);
    }
    else
    {
        if (isEqual<_Ty>(b, 0.0)) {
            throw divisionWithZero{ "division with zero\n" };
        }
        return(a / b);
    }
}


// Function to calculate the B-spline value
/*
    i is the index of the B-spline basis function in the B-spline basis set.
    This is a zero-based index, so the first B-spline basis function in the set has index 0.

    ord is the order of the B-spline basis function.
    This is also known as the degree of the B-spline basis function.
    The order is an integer greater than or equal to 1 that determines the number of
    knots used to define the B-spline basis function.

    x is the value at which the B-spline basis function should be evaluated.

    nk is the number of knots in the knot vector kns.

    kns is a vector of knots that define the B-spline basis function.
    The knots are sorted in ascending order,
    and the B-spline basis function is defined over the range between the first and last knot.
    The size of kns should be equal to nk.

*/
template<typename _Ty>
requires(is_decimal_v<_Ty>)
_NODISCARD _Ty bsp(int i, int ord, _Ty x, int nk, const std::vector<_Ty>& kns) {
    // Check for illegal value of i
    if (i<0 || i>nk - ord - 1) {
        std::cout << "illegal i value: i=" << i << "; nk-ord=" << nk << "-" << ord << "=" << nk - ord << '\n';
        return std::numeric_limits< _Ty>::quiet_NaN();
    }

    // Return 0 if x is outside the interval defined by the knots
    if (x<kns[i] || x>kns[i + ord]) return 0.0;

    // Remove repeated knots
    int k = nk - 1;
    if (k < 0) {
        std::cout << "k greated or equal to zero\n";
    }
    while (isEqual<_Ty>(kns[k], kns[k - 1])) k--;
    k--;

    // If ord is 1, return 1 if x is within the interval defined by the knots
    if (ord == 1) {
        if (i != k) {
            return static_cast<_Ty>(((kns[i] <= x && x < kns[i + 1]) ? 1.0 : 0.0));
        }
        else {
            if (i == k) {
                return static_cast<_Ty>(((kns[i] <= x && x <= kns[i + 1]) ? 1.0 : 0.0));
            }
            else return std::numeric_limits<_Ty>::quiet_NaN();
        }
    }
    // If ord is greater than 1, return the sum of two recursive calls
    else {
        return static_cast<_Ty>((gdiv((x - kns[i]) * bsp(i, ord - 1, x, nk, kns), kns[i + ord - 1] - kns[i]) +
            gdiv((kns[i + ord] - x) * bsp(i + 1, ord - 1, x, nk, kns), kns[i + ord] - kns[i + 1])
            ));
    }
}


template<typename _Ty>
requires(is_decimal_v<_Ty>)
inline void basic_calc_plot(const std::vector<_Ty>& kns, int order) {
    if (kns.empty()) {
        // Handle the case where the vector is empty
        std::cout << "Error empty knot vector\n";
        return;
    }
    if (order < 1) {
        std::cout << "order must be greater or equal to 1\n";
        return;
    }
    // Create an empty 2D vector to store the data
    std::vector<std::vector <_Ty>> data;

    // Create a vector of labels
    std::vector<std::string> labels = { "Xi" };

    // Create the labels
    for (int j = 0; j < kns.size() - order; j++)
    {

        labels.push_back("B_{" + std::to_string(j + 1) + "," + std::to_string(order - 1) + "}"); // order-1 and j+1 because the index is zero based
    }

    for (const std::string& s : labels)//string_view??
    {
        std::cout << s << "   ";
    }
    std::cout << '\n';

    for (_Ty i = 0.0; i <= kns.back(); i += static_cast<_Ty>(0.001))
    {
        // Create a new row vector
        std::vector< _Ty> row;

        row.push_back(i);
        // Starts from P=1 (Order)
        for (size_t j = 0; j < kns.size() - order; j++)
        {
            // Calculate the values for each column

            row.push_back(bsp(static_cast<int>(j), order, i, static_cast<int>(kns.size()), kns));
        }
        // Add the row to the data vector
        data.push_back(row);
    }

    // Print the contents of the data vector 
    for (const auto& row : data) {
        for (const auto& value : row)
        {
            std::cout << std::fixed << std::setprecision(4) << value << " ";
        }
        std::cout << '\n';
    }
    return;
}

template<typename _Ty>
requires(is_double_or_long_double_v< _Ty>)
_NODISCARD inline _Ty gauss_legendre(const unsigned int  u, const unsigned int j, const _Ty a, const _Ty b) {
    if (b < a || isEqual<_Ty>(a, b)) {
        std::cout << "wrong interval\n";
        return std::numeric_limits<_Ty>::quiet_NaN();
    }

    _Ty sum = 0;
    _Ty dx = (b - a) / 2.0;
    _Ty dx_a = (b + a) / 2.0;
    for (size_t i = 0; i < 64; i++) {
        sum += w[i] * (std::legendre(u, dx * x[i] + dx_a) * std::legendre(j, dx * x[i] + dx_a));
    }
    sum *= dx;
    return sum;
}
template<typename _Ty, typename v>
requires(is_double_or_long_double_v< _Ty>)
_NODISCARD inline _Ty gauss_legendre_f(const  unsigned int u, const _Ty a, const _Ty b, v&& g) {

    if (b < a || isEqual<_Ty>(a, b)) {
        std::cout << "wrong interval\n";
        return std::numeric_limits<_Ty>::quiet_NaN();
    }

    _Ty sum = 0;
    _Ty dx = (b - a) / 2;
    _Ty dx_a = (b + a) / 2;
    for (size_t i = 0; i < 64; i++) {
        sum += w[i] * (std::legendre(u, dx * x[i] + dx_a) * std::invoke(g, dx * x[i] + dx_a));
    }
    sum *= dx;
    return sum;
}

template<typename _Ty, typename u, typename v> //const _Ty(Pnf)(double, vector<_Ty>)
requires(is_double_or_long_double_v<_Ty>)
_NODISCARD inline _Ty error_gauss(u&& f, v&& Pnf, const _Ty a, const _Ty b, const std::vector<_Ty>& C)
{
    static_assert(std::is_same_v<std::invoke_result_t<decltype(f), _Ty>, _Ty>, "return type of f  must be the same with a,b args");
    static_assert(std::is_invocable_r_v<_Ty, u, _Ty>, "1th argument must be a callable that returns a floating point value and takes only one floating point value");

    static_assert(std::is_same_v<std::invoke_result_t<decltype(Pnf), _Ty, std::vector<_Ty>>, _Ty>, "return type of Pnf  must be the same with a,b args");
    static_assert(std::is_invocable_r_v<_Ty, v, _Ty, std::vector<_Ty>>, "2th argument must be a callable that returns a floating point value and takes only one floating point value");

    if (b < a || isEqual<_Ty>(a, b)) {
        std::cout << "wrong interval\n";
        return std::numeric_limits<_Ty>::quiet_NaN();
    }
    if (C.size() == 0) {
        std::cout << "wrong vector\n";
        return std::numeric_limits<_Ty>::quiet_NaN();
    }


    _Ty sum = 0;
    _Ty dx = (b - a) / 2.0;
    _Ty dx_a = (b + a) / 2.0;
    for (size_t i = 0; i < 64; i++) {
        sum += w[i] * std::pow(std::invoke(f, dx * x[i] + dx_a) - std::invoke(Pnf, dx * x[i] + dx_a, C), 2);
    }
    sum *= dx;
    return sum;
}

template <typename _Ty>
requires(is_double_or_long_double_v< _Ty>)
_NODISCARD inline _Ty Pnf(const _Ty x, const std::vector<_Ty>& C)noexcept {
    _Ty sum = 0;
    for (unsigned int i = 0; i < C.size(); i++) {
        sum += std::legendre(i, x) * C[i];
    }
    return sum;
}

template <typename _Ty>
requires(is_double_or_long_double_v<_Ty>)
_NODISCARD inline std::optional<std::vector<_Ty>> backwards_substitution(const std::vector<std::vector<_Ty>>& A, const std::vector<_Ty>& b)noexcept
{
    if (b.size() == 0 || A.size() == 0) {
        return std::nullopt;
    }
    std::vector<_Ty> x(b.size(), std::numeric_limits<_Ty>::quiet_NaN());
    for (size_t i = 0; i < b.size(); i++)
    {
        if (A[i].size() == 0)return std::nullopt;
        if (isEqual<_Ty>(A[i][i], 0.0)) {
            return std::nullopt;
        }
        x[i] = b[i] / A[i][i];
    }
    return std::optional{ x };
}



_PA_END








